#!/usr/bin/env bash
#
# Written by: crossroads1112
#
# Purpose: Take btrfs snapshots before and after a pacman -Syu
#
# Requirements: Btrfs (obviously), snapper, sudo, rsync, GNU coreutils (sed, grep etc.), package-query (optional) and 
# that your user is added into the ALLOW_USERS variable of your snapper config (/etc/snapper/configs/yourconfigname). 
# This script assumes your snapper config is called 'root'. If needed, change this in the snpr_cnfg variable below
#
#
# What this script does: #
# Wraps package upgrade in btrfs snapshots
# If /boot is on a separate partition, and the kernel is being upgraded, it backs up /boot (command line flag also 
# available)
# Log of all errors and a list of upgraded packages (with version numbers pre and post upgrade)
# If upgrade is interupted, offers to delete pre snapshot
# Optionally upgrades AUR packages (requires pacaur)
# Automatically adds snapshots to grub menu (requires btrfs-grub)
#
###############################################################
snpr_cnfg="$(snapper list-configs | tr -d ' ' | grep "|/$" | awk -F'|' '{print $1}')"
bootbackupdir="/var/local/boot-backup/"
log_path="/var/local/log/pacupg"
date=$(date "+%Y-%m-%d-%H%M%S")
log_file="${log_path}/pacupg_${date}.log"
boot=0
aur=0
helpmsg="${0##*/}: [OPTIONS]\n\n\
OPTIONS:\n\
-h,--help\t\tPrint this help message\n\
-b,--boot\t\tForce backup of boot to ${bootbackupdir}\n\
-a,--aur\t\tUpgrade AUR packages as well (requires pacaur)\n\
-i,--ignore\t\tSpecify comma delimited list of packages to skip during upgrade\n\
-r,--rollback\t\tRollback previous upgrades\n\
-d,--devel\t\tSame as -a but upgrades AUR development packages."

pacaurconfig="/etc/xdg/pacaur/config"

msg(){
    echo -en "\e[0;32m$(tput bold)> "${@}"$(tput sgr0)\e[0m"
}

warn(){
    echo -en "\e[0;31m$(tput bold)! "${@}"$(tput sgr0)\e[0m"
}

check(){
    # Make sure root is btrfs
    if [[ $(mount | awk -F'type ' '/\ \/\ /{print $2}' | cut -d' ' -f1) != "btrfs" ]] > /dev/null; then 
        warn "Root not btrfs. Aborting\n"
        return 1
    fi
    # Make sure snapper config exists
    if [[ -z $snpr_cnfg ]]; then
        warn "No snapper config found for /\n"
        return 1
    fi
}
bootbackup(){
    if mount | grep -q /boot && [[ $boot == 2 ]] ; then
        [[ -d $bootbackupdir ]] || sudo mkdir -p $bootbackupdir # Make backup directory if it does not exist
        msg "Backing up /boot\n" 
        # Copy contents of /boot to directory set in $bootbackupdir and delete any extraneous files in the 
        # latter directory
        if sudo rsync -av --delete /boot/ $bootbackupdir > /dev/null; then
            msg "Done\n"
            return 0
        else 
            warn "Boot backup failed. Aborting\n" | sudo tee -a $log_file 1>&2
            exit 3
        fi
    fi
    
}
aur(){
    msg "Beginning AUR upgrade\n"
    if ! which pacaur > /dev/null; then
        warn "pacaur not found. Aborting\n"
        exit 1
    fi
    source $pacaurconfig
    [[ -z $clean || $clean != "true" ]] &&  
        sudo sed -i '/clean=/d' $pacaurconfig && 
        echo "clean=true" | sudo tee -a $pacaurconfig > /dev/null # Make sure clean option is off in pacaur

    builddir="${XDG_CACHE_HOME:-${HOME}/.cache}/pacaur"


    msg "Checking for updates...\n"
    aurpkgs=$(pacaur --color never $ignoreopts $devel --check | awk -F'aur  ' '{print $2}')
    if [[ -z $aurpkgs ]]; then
        msg "No AUR packages to upgrade.\n"
        [[ $pkgsupgraded == 1 ]] && { btrgrub;  msg "Log of upgraded packages available at ${log_file}\n"; return; }
        return 2
    fi
    rm -rf "$builddir" && mkdir "$builddir"
    if eval "pacaur --color always -Syuw $devel"; then
    buildpkgs=$(find $builddir -type f -regex ".*\.pkg\.\(tar\|tar\.[gx]z\)")
    if [[ -n $buildpkgs ]]; then
            eval "in_block=1"
            # Take snapshot and store snapshot number in $pre
            pre=$(sudo snapper create --type=pre --cleanup-algorithm=number --print-number --description="AUR upgrade") 
            msg "New pre snapshot with number ${pre}\n"
            sudo pacman -U --noconfirm $ignoreopts $buildpkgs && msg "Packages upgraded\n" || return 1
            msg "Taking post snapshot\n"
            # Take post snapshot and store number in $post
            post=$(sudo snapper create --type=post --cleanup-algorithm=number --print-number --pre-number="$pre") 
            for pkg in "$buildpkgs"; do 
                rm $pkg
            done
            msg "Snapshot block complete: $snpr_cnfg/${pre}..${post}\n"
            echo -e "\nAUR packages upgraded: \n\n$aurpkgs" | sudo tee -a $log_file > /dev/null
            eval "in_block=0"
            btrgrub
            msg "Log of upgraded packages available at ${log_file}\n\n"
            return 0
        else
            return 2
        fi
    else
        warn "Download/build failed. Aborting.\n"
        return 1
    fi
}

btrgrub(){
    if [[ -f /etc/grub.d/41_snapshots-btrfs ]]; then
        msg "Attempting to update grub-cfg\n"
        if [[ -d /boot/efi/grub ]]; then
            grubcfg=/boot/efi/grub/grub.cfg
        elif [[ -d /boot/grub ]]; then
            grubcfg=/boot/grub/grub.cfg
        elif sudo find /boot -name "grub.cfg"; then
            grubcfg=$(sudo find /boot -name "grub.cfg")
        else
            warn "Grub directory not found"
            return 1
        fi
        sudo grub-mkconfig -o $grubcfg && 
        msg "Done. If you want to boot into the snapshot before this upgrade, select snapshot ${pre} from the grub menu\n" || 
        warn "grub-mkconfig terminated with an exit code of ${?}"
    fi 
}

rollback(){
    PS3="Choice: "
    kernelupg=0
    clear
    menu(){
    msg "What do you want to rollback?\n"
    select rollback_type in 'Timeline snapshot' 'Upgrade' 'Quit'; do
        case "$rollback_type" in 
    
        'Upgrade')
            clear
            # Show a list of all pre-post snapshots 
            snaps=$(
                snapper list --type pre-post | awk -F\| '{print $1"|" $3 "|" $5}'| grep 'AUR upgrade\|Package upgrade'
            ) 
            echo "$snaps"
            msg "Number of the upgrade you'd like to undo: " 
            read past
            if ! grep -q $past <<< $snaps; then
                warn "No such snapshot. Quiting.\n"
                exit 1
            fi
            post=$((past+1))
            sudo snapper -v undochange $past..$post  #Undo the changes from $pre and the one right after it
            #if snapper list --type pre-post  | grep -q $past | grep -q "$snapComment"; then
                #echo -n "This snapshot had a kernel upgrade. Do you want to roll that back as well? [Y/n] "
                #read kernback
                #case kernback in 
                    #""|[Yy]|[Yy][Ee][Ss]) sudo rsync -av --delete $bootbackupdir /boot/
                #esac
            #fi
            ;;
    
        'Timeline snapshot')
            clear
            # Show a list of all single snapshots 
            snaps=$(snapper list --type single | awk -F\| '{print $1"|" $2}'| sed '1,3d')
            echo "$snaps"
            msg "Number of the snapshot you like to return to: " 
            read past
            if ! grep -q $past <<< $snaps; then
                warn "No such snapshot. Quiting.\n"
                exit 1
            fi
            current=$(sudo snapper create --print-number)
            sudo snapper -v undochange $past..$current  #Undo change from selected snapshot to now
            sudo snapper delete $current
            ;; 
        'Quit') exit 0;;
        esac
        msg "Do you want to delete the snapshots you just rolled back? [y/N] "
        read delsnap
        case $delsnap in
            [Yy]|[Yy][Ee][Ss]) sudo snapper delete $past; [[ -n $post ]] && sudo snapper delete $post
            msg "Snapshots deleted" ;;
        esac
        read -p "All done, press [ENTER] to go back to the menu or Ctrl-C to exit"
        clear
        menu
    done
    }
menu
}

# Exit if checks fail
check || exit 
ignoreopts=""
TEMP="$(getopt -o h,a,r,d,i:,b -l boot,devel,help,aur,rollback,ignore: -n "${0##*/}" -- "$@")" || exit 1
eval set -- "$TEMP"
while true; do
   case "${1}" in
       -a|--aur) aur=1; shift;;
       -h|--help) echo -e $helpmsg; exit 0;;
       -b|--boot) boot=2; shift;;
       -i|--ignore) [[ -z "$ignoreopts" ]] && ignoreopts+="--ignore "; ignoreopts+="$2,"; shift 2;;
       -r|--rollback) rollback; shift;;
       -d|--devel) aur=1; devel="--devel --needed" ;shift;;
       --) break ;;
   esac
done

# Remove trailing comma if it exists;
[[ "${ignoreopts: -1}" == "," ]] && ignoreopts="${ignoreopts: 0: -1}"
 
[[ !  -d "$log_path" ]] && sudo mkdir -p $log_path # If log directory does not exist, create it

quit() { # Run cleanup code upon exit or error
    if [[ "$in_block" = "1" ]]; then
        warn "WARNING: Aborting from pre/post snapshot block Do you want to remove pre snapshot ${pre}? [Y/n]: "
        read remshot
        case $remshot in 
            ""|[Yy]|[Yy][Ee][Ss])sudo snapper delete $pre; msg "Snapshot removed\n"; in_block=0; exit;; 
            [Nn]|[Nn][Oo]) msg "Okay. Leaving empty pre snapshot\n"; in_block=0 ;;
        esac 
    fi
} 
trap quit EXIT ERR 15 1 2

msg "Retrieving packages...\n"
sudo pacman -Syuw $ignoreopts && msg "Done\n"  || exit 2 # Only pull down needed packages. Don't install

pkgs=$(package-query -SQuf "%n  %l  ->  %V\n")
if [[ -z $pkgs ]]; then # No packages to upgrade
    [[ $boot == 2 ]] && bootbackup # If bootbackup was manually set, do it
    [[ $aur == 1 ]] && { aur; exit; } # Try AUR
    msg "Nothing to update. Aborting.\n" && exit 2
fi

if pacman -Qqu | grep -q "^linux$";  then # There's a linux kernel upgrade
    boot=1
    snapComment=" + kernel upgrade"
fi

bootbackup 

in_block=1 # This allows quit() to know if we are in a snapshot
# Take snapshot and store snapshot number in $pre
pre=$(sudo snapper create --type=pre --cleanup-algorithm=number --print-number --description="Package upgrade${snapComment}")
msg "New pre snapshot with number ${pre}\n"
sudo pacman -Su --noconfirm # Upgrade packages
echo

# Take post snapshot and store number in $post
post=$(sudo snapper create --type=post --cleanup-algorithm=number --print-number --pre-number="$pre") 
msg "Snapshot block complete: $snpr_cnfg/${pre}..${post}\n"
echo -e "Packages upgraded: \n\n$pkgs" | sudo tee -a $log_file > /dev/null
# Remove pacman junk from logfile
sudo sed -i '/Proceed with installation/d' $log_file 
in_block=0
pkgsupgraded=1
bootbackup 
if [[ $aur == 1 ]]; then 
    aur
    exit
else
    btrgrub
    msg "Log of upgraded packages available at ${log_file}\n"
fi
# vim:set sts=4 sw=4 et filetype=sh syntax=sh
